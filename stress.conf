stressType =
  {
    TriggerContract(transferTokenWithSingleSign) = 42
    TriggerContract(transferTokenWithMultiSign) = 10
    TransferAsset = 10
    Sencoin(SingleSign) = 10
    SendCoin(MultiSign) = 10
    ParticipateAssetIssue = 4
    FreezeBalance(DelegateNet) = 4
    FreezeBalance(DelegateEnergy) = 4
    ExchangeInject = 2
    ExchangeWithdraw = 2
    ExchangeTransaction = 2
    TriggerContract(timeout) = 0
    UnFreezeBalance(DelegateNet) = 0
    UnFreezeBalance(DelegateEnergy) = 0
    createAccount = 0
    voteWitness = 0
    witnessUpdate = 0
    updateAsset = 0
    deployContract = 0
    updateSetting = 0
    exchangeCreate = 0
    proposalCreate = 0
  }

stressType1 =
  {
    TriggerContract(transferTokenWithSingleSign) = 90
    Sencoin(SingleSign) = 10
  }





type2IdName = {
  TriggerContract(transferTokenWithSingleSign) = transferToken
  TransferAsset = niceTransferAssetTransaction
  TriggerContract(transferTokenWithMultiSign) = MultiSignTriggerContract
  Sencoin(SingleSign) = niceTransferTransaction
  SendCoin(MultiSign) = MultiSignSendCoin
  ParticipateAssetIssue = participateAssetIssue
  FreezeBalance(DelegateNet) = freezeNet
  FreezeBalance(DelegateEnergy) = freezeEnergy
  ExchangeInject = exchangeInject
  ExchangeWithdraw = exchangeWithdraw
  ExchangeTransaction = niceExchangeTransaction
  TriggerContract(timeout) = triggerFibonacciContractCreator
  UnFreezeBalance(DelegateNet) = unFreezeNet
  UnFreezeBalance(DelegateEnergy) = unFreezeEnergy
  createAccount = accountCreateTransaction
  voteWitness = voteWitnessTransaction
  witnessUpdate = witnessUpdateTransaction
  updateAsset = updateAssetTransaction
  deployContract = deployContractTransactionCreator
  updateSetting = updateSettingTransaction
  exchangeCreate = exchangeCreate
  proposalCreate = proposalCreator

}


className = {
  transferToken = "org.tron.stresstest.dispatch.creator.contract.TransferTokenCreator"
  niceTransferAssetTransaction = "org.tron.stresstest.dispatch.creator.asset.NiceTransferAssetTransactionCreator"
  MultiSignTriggerContract = "org.tron.stresstest.dispatch.creator.MultiSign.MultiSignTriggerContract"
  niceTransferTransaction = "org.tron.stresstest.dispatch.creator.transfer.NiceTransferTransactionCreator"
  MultiSignSendCoin = "org.tron.stresstest.dispatch.creator.MultiSign.MultiSignSendCoin"
  participateAssetIssue = "org.tron.stresstest.dispatch.creator.asset.ParticipateAssetIssueCreator"
  freezeNet = "org.tron.stresstest.dispatch.creator.freeze.FreezeNetCreator"
  freezeEnergy = "org.tron.stresstest.dispatch.creator.freeze.FreezeEnergyCreator"
  exchangeInject = "org.tron.stresstest.dispatch.creator.exchange.ExchangeInjectCreator"
  exchangeWithdraw = "org.tron.stresstest.dispatch.creator.exchange.ExchangeWithdrawCreator"
  niceExchangeTransaction = "org.tron.stresstest.dispatch.creator.exchange.NiceExchangeTransactionCreator"
  triggerFibonacciContractCreator = "org.tron.stresstest.dispatch.creator.contract.TriggerTimeoutContractCreator"
  unFreezeNet = "org.tron.stresstest.dispatch.creator.freeze.UnFreezeNetCreator"
  unFreezeEnergy = "org.tron.stresstest.dispatch.creator.freeze.UnFreezeEnergyCreator"
  accountCreateTransaction = "org.tron.stresstest.dispatch.creator.account.AccountCreateTransactionCreator"
  voteWitnessTransaction = "org.tron.stresstest.dispatch.creator.vote.VoteWitnessTransactionCreator"
  witnessUpdateTransaction = "org.tron.stresstest.dispatch.creator.witness.WitnessUpdateTransactionCreator"
  updateAssetTransaction = "org.tron.stresstest.dispatch.creator.asset.UpdateAssetTransactionCreator"
  deployContractTransactionCreator = "org.tron.stresstest.dispatch.creator.contract.DeployContractTransactionCreator"
  updateSettingTransaction = "org.tron.stresstest.dispatch.creator.contract.UpdateSettingTransactionCreator"
  exchangeCreate = "org.tron.stresstest.dispatch.creator.exchange.ExchangeCreateCreator"
  proposalCreator = "org.tron.stresstest.dispatch.creator.witness.ProposalCreator"
}
